####################################################################
# Templates
####################################################################

# Template if it's better to work directly on each line
res = 0
with open("2021/input_files/day01") as f:
    for data in f:
        data = data.rstrip()
print(f"{res=}")

# Template if it's better to have a list in input
with open("2022/input_files/day04t") as f:
    lines = [line.rstrip() for line in f]
for line in lines:
    pass

# Template if there are groups separated by empty line
with open("2021/input_files/day04t") as f:
    data = "".join([line for line in f])
    groups = [group.split("\n") for group in data.split("\n\n")]

# Template single line of data
with open("2021/input_files/day07t") as f:
    ages = list(map(int, f.readline().rstrip().split(",")))

####################################################################
# Misc
####################################################################

# Binary operations
# It's often easier to work with strings of 0 and 1
# From integer to binary string:   [2:] is to remove the 0b prefix
bin(1234)[2:]
# From binary string to integer:
int("011001", 2)

# ASCII operations
ord("a")  # 97
chr(97)  # 'a'

####################################################################
# Containers
####################################################################

# Theory https://stackoverflow.com/questions/2920619/difference-between-list-sequence-and-slice-in-python
# iterable interface has three descendants:
# - sequence (random access by int, can be sliced)
#   - list
#   - tuple
#   - str
# - mapping (access via keys, no slicing)
#   - dict
# - set (unordered)
# - generator (most basic type, no random access, no slicing)
#   - created by generator expressions or yield
# All iterables can be used with an iterator (which has the same interface as the most basic type they support/generator)

# Top level functions which work on iterable: min, max, len, all, any, sum, map (executes function on all items)
# https://docs.python.org/3/library/functions.html

###################
# list
a_list = []
# Initialize list of objects (can't use [list()]*1000 because it would be 1000 times the same ref)
stacks = [list() for _ in range(1000)]
# Initialize 2 dimension list
grid = [[0] * 1000 for _ in range(1000)]
# Copy list without reference
second_list = a_list.copy()
# Search in list
value_found = next(x for x in a_list if x.name == "something")
# Sort in place (reverse)
a_list.sort(reverse=True)

# to remove items from a list while iterating on it: start by the end
def reverse_range(a_list):
    return range(len(a_list) - 1, -1, -1)


for i in reverse_range(a_list):
    # bla bla
    del a_list[i]

#####################
# dict
a_dict = {}
a_dict.keys()
a_dict.values()
a_dict.items()
for key in a_dict:
    # we have access to the values too
    print(a_dict[key])
for key, value in a_dict.items():  # gives directly both
    pass
# reversed map:
reverse_dict = {v: k for k, v in a_dict.items()}

#####################
# set
a_set = set()
b_set = {1, 2}  # can be initialized with curly brackets
a_set.add(3)
a_set.update(b_set)  # add elements from another iterable
a_set.issubset([1, 2])  # if all items of a_set are in the other iterable
a_set | b_set  # union
a_set & b_set  # intersection
a_set - b_set  # difference
a_set ^ b_set  # symetric_difference
a_set <= b_set  # issubset
a_set >= b_set  # issuperset

####################################################################
# Math
####################################################################

# Integer division
i = 5 // 2  # return 2

import math

test = math.inf  # infinity
test = math.prod([monkey.test for monkey in a_list])  # multiply items of a list

####################################################################
# Classes
####################################################################


class Node:
    def __init__(self, name, is_dir, parent=None, size=0):
        self.children = []
        self.name = name
        self.is_dir = is_dir
        self.size = size
        self.parent = parent

    def double_size(self):
        return self.size * 2


####################################################################
# Other misc
####################################################################

# Deep copy of a list, when you need to copy each element
import copy

b_list = copy.deepcopy(a_list)

# Break multiple looks
class GetOutOfLoop(Exception):
    pass


try:
    for i in range(10):
        for j in range(20):
            if i == j:
                raise GetOutOfLoop
except GetOutOfLoop:
    pass


####################################################################
# BFS with path
####################################################################

# graph is in adjacent list representation
graph = {
    "1": ["2", "3", "4"],
    "2": ["5", "6"],
    "5": ["9", "10"],
    "4": ["7", "8"],
    "7": ["11", "12"],
}


def bfs(graph, start, end):
    # maintain a queue of paths
    queue = []
    # push the first path into the queue
    queue.append([start])
    while queue:
        # get the first path from the queue
        path = queue.pop(0)
        # get the last node from the path
        node = path[-1]
        # path found
        if node == end:
            return path
        # enumerate all adjacent nodes, construct a
        # new path and push it into the queue
        for adjacent in graph.get(node, []):
            new_path = list(path)
            new_path.append(adjacent)
            queue.append(new_path)


print(bfs(graph, "1", "11"))

# OR

graph = {
    "A": set(["B", "C"]),
    "B": set(["A", "D", "E"]),
    "C": set(["A", "F"]),
    "D": set(["B"]),
    "E": set(["B", "F"]),
    "F": set(["C", "E"]),
}


def retunShortestPath(graph, start, end):

    queue = [(start, [start])]
    visited = set()

    while queue:
        vertex, path = queue.pop(0)
        visited.add(vertex)
        for node in graph[vertex]:
            if node == end:
                return path + [end]
            else:
                if node not in visited:
                    visited.add(node)
                    queue.append((node, path + [node]))
