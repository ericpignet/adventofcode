# Template if it's better to work directly on each line
res = 0
with open("2021/input_files/day01") as f:
    for data in f:
        data = data.rstrip()
print(f"{res=}")

# Template if it's better to have a list in input
with open("2022/input_files/day04t") as f:
    lines = [line.rstrip() for line in f]
for line in lines:
    pass

# Template if there are groups separated by empty line
with open("2021/input_files/day04t") as f:
    data = "".join([line for line in f])
    groups = [group.split("\n") for group in data.split("\n\n")]

# Template single line of data
with open("2021/input_files/day07t") as f:
    ages = list(map(int, f.readline().rstrip().split(",")))

# Binary operations
# It's often easier to work with strings of 0 and 1
# From integer to binary string:   [2:] is to remove the 0b prefix
bin(1234)[2:]
# From binary string to integer:
int("011001", 2)

# ASCII operations
ord("a")  # 97
chr(97)  # 'a'

# Initialize list of objects (can't use [list()]*1000 because it would be 1000 times the same ref)
stacks = [list() for i in range(1000)]
# Initialize 2 dimension list
grid = [[0] * 1000 for i in range(1000)]
# Copy list without reference
second_list = first_list.copy()
# Top level functions which work on lists: min, max, len, all, any, sum, map (which allows to do anything)
# https://docs.python.org/3/library/functions.html

# Math stuff
import math
test = math.inf  # infinity

# Break multiple looks
class GetOutOfLoop(Exception):
    pass


try:
    for i in range(10):
        for j in range(20:)
            if i == j:
                raise GetOutOfLoop
except GetOutOfLoop:
    pass

# Misc

import fileinput

# INPUT = [line.strip() for line in fileinput.input()]
with open("2021/input_files/day01") as f:
    INPUT = [line.strip() for line in f]
    for data in INPUT:
        data = int(data.strip())

